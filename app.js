// –ú–∏–Ω–∏-—Ö–æ—Å—Ç–∏–Ω–≥ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π Firebase Authentication
class PresentationHosting {
    constructor() {
        // –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Firebase
        this.firebaseConfig = {
            apiKey: "AIzaSyCFpnlhrD0XYoFX0gSTYuntqp5luEAMY-w",
            authDomain: "werwer5555.firebaseapp.com",
            projectId: "werwer5555",
            storageBucket: "werwer5555.firebasestorage.app",
            messagingSenderId: "25398297460",
            appId: "1:25398297460:web:ac9832da4c53b6f3f42221",
            measurementId: "G-PBF39XWP8K"
        };
        
        this.currentUser = null;
        this.userRole = 'guest';
        this.currentPage = 'home';
        this.currentPresentation = null;
        this.pdfDoc = null;
        this.pageNum = 1;
        this.scale = 1.5;
        this.isFirebaseConnected = false;
        this.isAuthEnabled = false;
        this.demoMode = false;
        this.isInitialized = false;
        
        // Fallback –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Firebase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        this.fallbackData = {
            presentations: [
                {
                    id: 'sample1',
                    title: '–û—Å–Ω–æ–≤—ã –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
                    description: '–í–≤–µ–¥–µ–Ω–∏–µ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML, CSS –∏ JavaScript',
                    category: 'tech',
                    author: '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
                    ownerName: '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
                    createdAt: new Date('2024-01-15'),
                    isPublic: true,
                    viewCount: 125
                },
                {
                    id: 'sample2',
                    title: '–¶–∏—Ñ—Ä–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è',
                    description: '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ä–∞–∑–≤–∏—Ç–∏—è –±–∏–∑–Ω–µ—Å–∞ –≤ —Ü–∏—Ñ—Ä–æ–≤—É—é —ç–ø–æ—Ö—É',
                    category: 'business',
                    author: '–ë–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç',
                    ownerName: '–ë–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç',
                    createdAt: new Date('2024-02-10'),
                    isPublic: true,
                    viewCount: 89
                },
                {
                    id: 'sample3',
                    title: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
                    description: '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –≤ –æ–±—É—á–µ–Ω–∏–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏–∏ –Ω–∞–≤—ã–∫–æ–≤',
                    category: 'education',
                    author: '–ü–µ–¥–∞–≥–æ–≥-–º–µ—Ç–æ–¥–∏—Å—Ç',
                    ownerName: '–ü–µ–¥–∞–≥–æ–≥-–º–µ—Ç–æ–¥–∏—Å—Ç',
                    createdAt: new Date('2024-03-05'),
                    isPublic: true,
                    viewCount: 156
                }
            ],
            users: [
                { id: 'admin1', email: 'admin@example.com', role: 'admin', displayName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', createdAt: new Date('2024-01-01') },
                { id: 'user1', email: 'user@example.com', role: 'user', displayName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', createdAt: new Date('2024-01-15') }
            ]
        };
    }
    
    async init() {
        if (this.isInitialized) return;
        
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
        
        // –°–†–ê–ó–£ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.updateConnectionStatus('connecting');
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        this.bindEvents();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å—Ä–∞–∑—É
        this.showPage('home');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Firebase
        let connectionSuccess = false;
        
        try {
            await this.initFirebaseCore();
            connectionSuccess = true;
            this.updateConnectionStatus('connected');
            console.log('‚úÖ Firebase Firestore –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            
            // –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–≥–æ Firestore –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å Auth (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            this.initFirebaseAuth();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Firebase Firestore:', error);
            this.updateConnectionStatus('error');
            // –í–∫–ª—é—á–∞–µ–º fallback —Ä–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ Firestore
            this.demoMode = true;
            connectionSuccess = false;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        await this.loadPresentations();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.updateUI();
        
        this.isInitialized = true;
        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        this.updateSystemStatus();
    }
    
    async initFirebaseCore() {
        console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Firebase Firestore...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Firebase SDK
        if (typeof firebase === 'undefined') {
            throw new Error('Firebase SDK –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ Firebase
        if (firebase.apps.length > 0) {
            console.log('Firebase —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            this.db = firebase.firestore();
            this.storage = firebase.storage();
        } else {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            firebase.initializeApp(this.firebaseConfig);
            this.db = firebase.firestore();
            this.storage = firebase.storage();
        }
        
        // –ö–†–ò–¢–ò–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ Firestore
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Firestore...');
        const testPromise = this.db.collection('presentations').where('isPublic', '==', true).limit(1).get();
        const timeoutPromise = new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Firestore connection timeout')), 8000)
        );
        
        await Promise.race([testPromise, timeoutPromise]);
        
        // –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç Firestore —Ä–∞–±–æ—Ç–∞–µ—Ç
        this.isFirebaseConnected = true;
        this.demoMode = false;
        
        console.log('‚úÖ Firestore –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }
    
    async initFirebaseAuth() {
        console.log('üîê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Firebase Authentication...');
        
        try {
            this.auth = firebase.auth();
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º Authentication —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            const authTestPromise = new Promise((resolve) => {
                const unsubscribe = this.auth.onAuthStateChanged((user) => {
                    unsubscribe();
                    resolve(user);
                });
            });
            
            const authTimeoutPromise = new Promise((_, reject) => 
                setTimeout(() => reject(new Error('Auth timeout')), 5000)
            );
            
            await Promise.race([authTestPromise, authTimeoutPromise]);
            
            this.isAuthEnabled = true;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            this.auth.onAuthStateChanged((user) => {
                this.handleAuthStateChange(user);
            });
            
            console.log('‚úÖ Firebase Authentication –ø–æ–¥–∫–ª—é—á–µ–Ω');
            
        } catch (error) {
            console.warn('‚ö†Ô∏è Firebase Authentication –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
            this.isAuthEnabled = false;
            // –ù–ï –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Auth
        this.updateUI();
    }
    
    updateConnectionStatus(status = 'connecting') {
        const indicator = document.getElementById('statusIndicator');
        const statusText = document.getElementById('statusText');
        
        if (indicator && statusText) {
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–π
            indicator.className = `status-indicator ${status}`;
            
            switch(status) {
                case 'connecting':
                    statusText.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Firebase...';
                    break;
                case 'connected':
                    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö –µ—Å–ª–∏ Firestore —Ä–∞–±–æ—Ç–∞–µ—Ç
                    statusText.textContent = '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Firebase';
                    break;
                case 'error':
                    statusText.textContent = '‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º';
                    break;
                default:
                    statusText.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
            }
            
            console.log('–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω:', status, statusText.textContent);
        }
    }
    
    updateSystemStatus() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        const firestoreStatus = document.getElementById('firestoreStatus');
        const authStatus = document.getElementById('authStatus');
        
        if (firestoreStatus) {
            if (this.isFirebaseConnected) {
                firestoreStatus.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
                firestoreStatus.className = 'status status--success';
            } else {
                firestoreStatus.textContent = '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
                firestoreStatus.className = 'status status--error';
            }
        }
        
        if (authStatus) {
            if (this.isAuthEnabled) {
                authStatus.textContent = '–ê–∫—Ç–∏–≤–µ–Ω';
                authStatus.className = 'status status--success';
            } else {
                authStatus.textContent = '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
                authStatus.className = 'status status--warning';
            }
        }
    }
    
    async handleAuthStateChange(user) {
        console.log('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', user ? user.email : '–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        this.currentUser = user;
        
        if (user && !this.demoMode && this.isAuthEnabled) {
            // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firebase
            try {
                const userDoc = await this.db.collection('users').doc(user.uid).get();
                if (userDoc.exists) {
                    this.userRole = userDoc.data().role || 'user';
                } else {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await this.createUserProfile(user);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
                this.userRole = 'user';
            }
        } else if (user && this.demoMode) {
            // –í fallback —Ä–µ–∂–∏–º–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ email
            const fallbackUser = this.fallbackData.users.find(u => u.email === user.email);
            this.userRole = fallbackUser ? fallbackUser.role : 'user';
        } else {
            this.userRole = 'guest';
        }
        
        this.updateUI();
    }
    
    async createUserProfile(user) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–¥–º–∏–Ω)
            const settingsDoc = await this.db.collection('settings').doc('global').get();
            const isFirstUser = !settingsDoc.exists || !settingsDoc.data()?.firstAdminCreated;
            
            const role = isFirstUser ? 'admin' : 'user';
            
            await this.db.collection('users').doc(user.uid).set({
                uid: user.uid,
                email: user.email,
                displayName: user.displayName || user.email.split('@')[0],
                role: role,
                createdAt: firebase.firestore.FieldValue.serverTimestamp()
            });
            
            this.userRole = role;
            
            if (isFirstUser) {
                // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π –∞–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω
                await this.db.collection('settings').doc('global').set({
                    firstAdminCreated: true
                });
                
                this.showToast('success', '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', '–í—ã –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            this.userRole = 'user';
        }
    }
    
    updateUI() {
        const loginBtn = document.getElementById('loginBtn');
        const logoutBtn = document.getElementById('logoutBtn');
        const userInfo = document.getElementById('userInfo');
        const userDisplayName = document.getElementById('userDisplayName');
        const uploadBtn = document.getElementById('uploadBtn');
        const profileBtn = document.getElementById('profileBtn');
        const adminBtn = document.getElementById('adminBtn');
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Auth –¥–æ—Å—Ç—É–ø–µ–Ω
        if (this.currentUser) {
            if (loginBtn) loginBtn.classList.add('hidden');
            if (userInfo) userInfo.classList.remove('hidden');
            if (userDisplayName) {
                userDisplayName.textContent = this.currentUser.displayName || this.currentUser.email;
            }
            
            if (this.userRole === 'user' || this.userRole === 'admin') {
                if (uploadBtn) uploadBtn.classList.remove('hidden');
                if (profileBtn) profileBtn.classList.remove('hidden');
            }
            
            if (this.userRole === 'admin') {
                if (adminBtn) adminBtn.classList.remove('hidden');
            }
        } else {
            if (loginBtn) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Auth –¥–æ—Å—Ç—É–ø–µ–Ω –ò–õ–ò –≤ demo —Ä–µ–∂–∏–º–µ
                if (this.isAuthEnabled || this.demoMode) {
                    loginBtn.classList.remove('hidden');
                } else {
                    loginBtn.classList.add('hidden');
                }
            }
            if (userInfo) userInfo.classList.add('hidden');
            if (uploadBtn) uploadBtn.classList.add('hidden');
            if (profileBtn) profileBtn.classList.add('hidden');
            if (adminBtn) adminBtn.classList.add('hidden');
        }
    }
    
    bindEvents() {
        console.log('–ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π...');
        
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        this.bindNavigation();
        
        // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        this.bindAuthentication();
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π
        this.bindUpload();
        
        // –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        this.bindAdminPanel();
        
        // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        this.bindModals();
        
        // PDF –Ω–∞–≤–∏–≥–∞—Ü–∏—è
        this.bindPDFNavigation();
        
        // –§–∏–ª—å—Ç—Ä—ã
        this.bindFilters();
        
        console.log('–°–æ–±—ã—Ç–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω—ã');
    }
    
    bindNavigation() {
        const homeBtn = document.getElementById('homeBtn');
        const loginBtn = document.getElementById('loginBtn');
        const uploadBtn = document.getElementById('uploadBtn');
        const adminBtn = document.getElementById('adminBtn');
        const logoutBtn = document.getElementById('logoutBtn');
        
        if (homeBtn) {
            homeBtn.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–ì–ª–∞–≤–Ω–∞—è"');
                this.showPage('home');
            });
        }
        
        if (loginBtn) {
            loginBtn.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–í–æ–π—Ç–∏"');
                if (this.isAuthEnabled || this.demoMode) {
                    this.showPage('auth');
                } else {
                    this.showToast('warning', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ', '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
                }
            });
        }
        
        if (uploadBtn) {
            uploadBtn.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å"');
                this.showPage('upload');
            });
        }
        
        if (adminBtn) {
            adminBtn.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"');
                this.showPage('admin');
            });
        }
        
        if (logoutBtn) {
            logoutBtn.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–í—ã–π—Ç–∏"');
                this.logout();
            });
        }
    }
    
    bindAuthentication() {
        const authForm = document.getElementById('authForm');
        const registerBtn = document.getElementById('registerBtn');
        const googleSignInBtn = document.getElementById('googleSignInBtn');
        
        if (authForm) {
            authForm.addEventListener('submit', (e) => {
                e.preventDefault();
                console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞');
                this.handleAuth(e);
            });
        }
        
        if (registerBtn) {
            registerBtn.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"');
                this.handleRegister();
            });
        }
        
        if (googleSignInBtn) {
            googleSignInBtn.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "Google"');
                this.signInWithGoogle();
            });
        }
    }
    
    bindUpload() {
        const uploadForm = document.getElementById('uploadForm');
        if (uploadForm) {
            uploadForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleUpload(e);
            });
        }
    }
    
    bindAdminPanel() {
        const adminTabs = document.querySelectorAll('.admin-tab');
        adminTabs.forEach(tab => {
            tab.addEventListener('click', (e) => {
                e.preventDefault();
                this.showAdminSection(e.target.dataset.tab);
            });
        });
    }
    
    bindModals() {
        const closeRoleModal = document.getElementById('closeRoleModal');
        const cancelRole = document.getElementById('cancelRole');
        const roleForm = document.getElementById('roleForm');
        
        if (closeRoleModal) {
            closeRoleModal.addEventListener('click', (e) => {
                e.preventDefault();
                this.hideModal('roleModal');
            });
        }
        
        if (cancelRole) {
            cancelRole.addEventListener('click', (e) => {
                e.preventDefault();
                this.hideModal('roleModal');
            });
        }
        
        if (roleForm) {
            roleForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleRoleChange(e);
            });
        }
    }
    
    bindPDFNavigation() {
        const backToHome = document.getElementById('backToHome');
        const prevPage = document.getElementById('prevPage');
        const nextPage = document.getElementById('nextPage');
        const zoomOut = document.getElementById('zoomOut');
        const zoomIn = document.getElementById('zoomIn');
        
        if (backToHome) {
            backToHome.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
                this.showPage('home');
            });
        }
        
        if (prevPage) {
            prevPage.addEventListener('click', (e) => {
                e.preventDefault();
                this.changePage(-1);
            });
        }
        
        if (nextPage) {
            nextPage.addEventListener('click', (e) => {
                e.preventDefault();
                this.changePage(1);
            });
        }
        
        if (zoomOut) {
            zoomOut.addEventListener('click', (e) => {
                e.preventDefault();
                this.changeZoom(-0.25);
            });
        }
        
        if (zoomIn) {
            zoomIn.addEventListener('click', (e) => {
                e.preventDefault();
                this.changeZoom(0.25);
            });
        }
    }
    
    bindFilters() {
        const categoryFilter = document.getElementById('categoryFilter');
        if (categoryFilter) {
            categoryFilter.addEventListener('change', () => {
                console.log('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
                this.loadPresentations();
            });
        }
    }
    
    async handleAuth(e) {
        e.preventDefault();
        const email = document.getElementById('email').value.trim();
        const password = document.getElementById('password').value.trim();
        
        if (!email || !password) {
            this.showToast('error', '–û—à–∏–±–∫–∞', '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
            return;
        }
        
        console.log('–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', email);
        
        if (!this.isAuthEnabled) {
            // –í demo —Ä–µ–∂–∏–º–µ –∏–ª–∏ –µ—Å–ª–∏ Auth –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            this.handleFallbackAuth(email, password);
            return;
        }
        
        try {
            await this.auth.signInWithEmailAndPassword(email, password);
            this.showToast('success', '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω', '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!');
            this.showPage('home');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
            this.showToast('error', '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞', this.getAuthErrorMessage(error));
        }
    }
    
    handleFallbackAuth(email, password) {
        console.log('Fallback –≤—Ö–æ–¥ –¥–ª—è:', email);
        const fallbackUser = this.fallbackData.users.find(u => u.email === email);
        if (fallbackUser && password === 'demo123') {
            this.currentUser = { 
                email, 
                displayName: fallbackUser.displayName, 
                uid: fallbackUser.id 
            };
            this.userRole = fallbackUser.role;
            this.updateUI();
            this.showToast('success', '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω', `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${fallbackUser.displayName}!`);
            this.showPage('home');
        } else {
            this.showToast('error', '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞', '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞');
        }
    }
    
    async handleRegister() {
        const email = document.getElementById('email').value.trim();
        const password = document.getElementById('password').value.trim();
        
        if (!email || !password) {
            this.showToast('error', '–û—à–∏–±–∫–∞', '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
            return;
        }
        
        if (!this.isAuthEnabled) {
            this.showToast('warning', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ', '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            return;
        }
        
        try {
            await this.auth.createUserWithEmailAndPassword(email, password);
            this.showToast('success', '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞', '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!');
            this.showPage('home');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
            this.showToast('error', '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', this.getAuthErrorMessage(error));
        }
    }
    
    async signInWithGoogle() {
        if (!this.isAuthEnabled) {
            this.showToast('warning', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ', '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            return;
        }
        
        try {
            const provider = new firebase.auth.GoogleAuthProvider();
            await this.auth.signInWithPopup(provider);
            this.showToast('success', '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω', '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!');
            this.showPage('home');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google:', error);
            this.showToast('error', '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google');
        }
    }
    
    async logout() {
        if (!this.demoMode && this.auth && this.isAuthEnabled) {
            await this.auth.signOut();
        } else {
            this.currentUser = null;
            this.userRole = 'guest';
            this.updateUI();
        }
        this.showToast('info', '–í—ã—Ö–æ–¥', '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
        this.showPage('home');
    }
    
    async handleUpload(e) {
        e.preventDefault();
        
        if (!this.currentUser) {
            this.showToast('warning', '–¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥', '–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
            return;
        }
        
        if (this.demoMode) {
            this.showToast('warning', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ', '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ');
            return;
        }
        
        const file = document.getElementById('presentationFile').files[0];
        const title = document.getElementById('title').value.trim();
        const description = document.getElementById('description').value.trim();
        const category = document.getElementById('category').value;
        const isPublic = document.getElementById('isPublic').checked;
        
        if (!file || !title) {
            this.showToast('error', '–û—à–∏–±–∫–∞', '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
            return;
        }
        
        if (file.size > 1024 * 1024) { // 1MB –ª–∏–º–∏—Ç
            this.showToast('error', '–û—à–∏–±–∫–∞', '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 1MB)');
            return;
        }
        
        try {
            this.showToast('info', '–ó–∞–≥—Ä—É–∑–∫–∞', '–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é...');
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ base64
            const base64 = await this.fileToBase64(file);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –≤ Firestore
            await this.db.collection('presentations').add({
                title,
                description,
                category,
                isPublic,
                fileType: file.type,
                fileSize: file.size,
                fileData: base64,
                fileName: file.name,
                ownerId: this.currentUser.uid,
                ownerName: this.currentUser.displayName || this.currentUser.email,
                createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                views: 0
            });
            
            this.showToast('success', '–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ', '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥');
            document.getElementById('uploadForm').reset();
            this.showPage('home');
            this.loadPresentations();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
            this.showToast('error', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é');
        }
    }
    
    fileToBase64(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = () => resolve(reader.result);
            reader.onerror = error => reject(error);
        });
    }
    
    async loadPresentations() {
        console.log('üìã –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π...');
        const grid = document.getElementById('presentationsGrid');
        const loading = document.getElementById('loadingIndicator');
        const categoryFilter = document.getElementById('categoryFilter');
        
        if (!grid) {
            console.error('–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç presentationsGrid');
            return;
        }
        
        const selectedCategory = categoryFilter ? categoryFilter.value : '';
        
        if (loading) loading.classList.remove('hidden');
        grid.innerHTML = '';
        
        try {
            let presentations = [];
            
            if (this.demoMode) {
                console.log('üìã –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π –∏–∑ fallback –¥–∞–Ω–Ω—ã—Ö...');
                presentations = this.fallbackData.presentations.filter(p => 
                    p.isPublic && (!selectedCategory || p.category === selectedCategory)
                );
            } else {
                console.log('üìã –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π –∏–∑ Firestore...');
                let query = this.db.collection('presentations').where('isPublic', '==', true);
                
                if (selectedCategory) {
                    query = query.where('category', '==', selectedCategory);
                }
                
                const snapshot = await query.orderBy('createdAt', 'desc').get();
                presentations = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${presentations.length} –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π –∏–∑ Firestore`);
            }
            
            if (presentations.length === 0) {
                grid.innerHTML = `
                    <div class="text-center" style="grid-column: 1/-1; padding: 2rem; color: var(--color-text-secondary);">
                        <h3>–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                        <p>–í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π.</p>
                        ${this.demoMode ? '<p><small>–†–∞–±–æ—Ç–∞–µ–º –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ</small></p>' : ''}
                        ${!this.currentUser && (this.isAuthEnabled || this.demoMode) ? '<p><small><strong>–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É</strong> –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π</small></p>' : ''}
                    </div>
                `;
            } else {
                presentations.forEach(presentation => {
                    const card = this.createPresentationCard(presentation);
                    grid.appendChild(card);
                });
                console.log(`üìã –û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ ${presentations.length} –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π`);
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π:', error);
            grid.innerHTML = `
                <div class="text-center" style="grid-column: 1/-1; padding: 2rem; color: var(--color-error);">
                    <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π</h3>
                    <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.</p>
                    <button class="btn btn--outline btn--sm" onclick="app.loadPresentations()">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
                </div>
            `;
        }
        
        if (loading) loading.classList.add('hidden');
    }
    
    createPresentationCard(presentation) {
        const card = document.createElement('div');
        card.className = 'presentation-card';
        card.addEventListener('click', () => this.openPresentation(presentation));
        
        const date = presentation.createdAt ? 
            (presentation.createdAt.toDate ? presentation.createdAt.toDate() : presentation.createdAt) : 
            new Date();
        
        card.innerHTML = `
            <div class="presentation-thumbnail">üìÑ</div>
            <div class="presentation-content">
                <h3>${this.escapeHtml(presentation.title)}</h3>
                <p>${this.escapeHtml(presentation.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}</p>
                <div class="presentation-meta">
                    <span class="status status--info">${this.getCategoryName(presentation.category)}</span>
                    <span class="presentation-author">üë§ ${this.escapeHtml(presentation.ownerName || presentation.author || '–ê–≤—Ç–æ—Ä')}</span>
                </div>
                <div class="presentation-meta" style="margin-top: 8px;">
                    <small>üìÖ ${date.toLocaleDateString('ru-RU')}</small>
                    <small>üëÅ ${presentation.views || presentation.viewCount || 0}</small>
                </div>
            </div>
        `;
        
        return card;
    }
    
    escapeHtml(unsafe) {
        if (typeof unsafe !== 'string') {
            return '';
        }
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }
    
    getCategoryName(category) {
        const categories = {
            business: '–ë–∏–∑–Ω–µ—Å',
            education: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', 
            tech: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'
        };
        return categories[category] || category;
    }
    
    async openPresentation(presentation) {
        console.log('üëÅ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏:', presentation.title);
        this.currentPresentation = presentation;
        
        if (!this.demoMode && presentation.id && this.isFirebaseConnected) {
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Firestore –¥–æ—Å—Ç—É–ø–µ–Ω
            try {
                await this.db.collection('presentations').doc(presentation.id).update({
                    views: firebase.firestore.FieldValue.increment(1)
                });
            } catch (error) {
                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:', error);
            }
        }
        
        this.showPage('presentation');
        this.displayPresentationInfo();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–∑–µ—Ü –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
        this.loadSamplePresentation();
    }
    
    displayPresentationInfo() {
        const presentation = this.currentPresentation;
        const date = presentation.createdAt ? 
            (presentation.createdAt.toDate ? presentation.createdAt.toDate() : presentation.createdAt) : 
            new Date();
        
        const titleEl = document.getElementById('presentationTitle');
        const descEl = document.getElementById('presentationDescription');
        const categoryEl = document.getElementById('presentationCategory');
        const authorEl = document.getElementById('presentationAuthor');
        const dateEl = document.getElementById('presentationDate');
        
        if (titleEl) titleEl.textContent = presentation.title;
        if (descEl) descEl.textContent = presentation.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
        if (categoryEl) {
            categoryEl.textContent = this.getCategoryName(presentation.category);
            categoryEl.className = 'status status--info';
        }
        if (authorEl) authorEl.textContent = `üë§ –ê–≤—Ç–æ—Ä: ${presentation.ownerName || presentation.author || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`;
        if (dateEl) dateEl.textContent = `üìÖ –î–∞—Ç–∞: ${date.toLocaleDateString('ru-RU')}`;
    }
    
    loadSamplePresentation() {
        setTimeout(() => this.renderSamplePresentation(), 100);
    }
    
    renderSamplePresentation() {
        const canvas = document.getElementById('pdfCanvas');
        if (!canvas) return;
        
        const ctx = canvas.getContext('2d');
        
        canvas.width = 800;
        canvas.height = 600;
        
        // –ë–µ–ª—ã–π —Ñ–æ–Ω
        ctx.fillStyle = 'white';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ctx.fillStyle = '#1f343b';
        ctx.font = 'bold 48px Arial';
        ctx.textAlign = 'center';
        ctx.fillText(this.currentPresentation.title, canvas.width / 2, 120);
        
        // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        ctx.font = '24px Arial';
        ctx.fillText('–û–±—Ä–∞–∑–µ—Ü –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏', canvas.width / 2, 170);
        
        // –ö–æ–Ω—Ç–µ–Ω—Ç
        ctx.font = '20px Arial';
        ctx.textAlign = 'left';
        ctx.fillText('‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', 60, 250);
        ctx.fillText('‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', 60, 290);
        ctx.fillText('‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ PDF-—Ñ–∞–π–ª–æ–≤ –¥–æ 1MB', 60, 330);
        ctx.fillText('‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: –ë–∏–∑–Ω–µ—Å, –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 60, 370);
        ctx.fillText('‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Firebase Firestore', 60, 410);
        
        // –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        ctx.font = '18px Arial';
        const statusText = this.isFirebaseConnected ? '‚úÖ Firebase –ø–æ–¥–∫–ª—é—á–µ–Ω' : '‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º';
        ctx.fillText(`–°—Ç–∞—Ç—É—Å: ${statusText}`, 60, 460);
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–º–æ
        if (this.demoMode) {
            ctx.fillStyle = '#e67e22';
            ctx.fillText('–î–µ–º–æ-—Ä–µ–∂–∏–º: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ', 60, 500);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const pageInfo = document.getElementById('pageInfo');
        if (pageInfo) pageInfo.textContent = '–û–±—Ä–∞–∑–µ—Ü –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏';
    }
    
    changePage(delta) {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        console.log('–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º:', delta);
        this.showToast('info', '–ù–∞–≤–∏–≥–∞—Ü–∏—è', '–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è');
    }
    
    changeZoom(delta) {
        this.scale = Math.max(0.5, Math.min(3, this.scale + delta));
        console.log('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞:', this.scale);
        this.showToast('info', '–ú–∞—Å—à—Ç–∞–±', `–ú–∞—Å—à—Ç–∞–±: ${Math.round(this.scale * 100)}%`);
    }
    
    showPage(pageName) {
        console.log('üìÑ –ü–æ–∫–∞–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', pageName);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const pages = document.querySelectorAll('.page');
        pages.forEach(page => {
            page.classList.add('hidden');
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const targetPage = document.getElementById(pageName + 'Page');
        if (targetPage) {
            targetPage.classList.remove('hidden');
            this.currentPage = pageName;
            console.log('üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞', pageName, '–ø–æ–∫–∞–∑–∞–Ω–∞');
        } else {
            console.error('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', pageName + 'Page');
        }
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        if (pageName === 'admin' && this.userRole === 'admin') {
            setTimeout(() => this.loadAdminData(), 100);
        }
    }
    
    async loadAdminData() {
        if (!this.currentUser || this.userRole !== 'admin') {
            this.showToast('error', '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω', '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ');
            this.showPage('home');
            return;
        }
        
        console.log('üîß –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...');
        this.showAdminSection('users');
        await this.loadAdminUsers();
        await this.loadAdminPresentations(); 
        await this.loadAdminStats();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        this.updateSystemStatus();
    }
    
    showAdminSection(section) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±—ã
        const tabs = document.querySelectorAll('.admin-tab');
        tabs.forEach(tab => {
            tab.classList.remove('active');
            if (tab.dataset.tab === section) {
                tab.classList.add('active');
            }
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å–µ–∫—Ü–∏—é
        const sections = document.querySelectorAll('.admin-section');
        sections.forEach(sectionEl => {
            sectionEl.classList.add('hidden');
        });
        
        const targetSection = document.getElementById('admin' + section.charAt(0).toUpperCase() + section.slice(1));
        if (targetSection) {
            targetSection.classList.remove('hidden');
        }
    }
    
    async loadAdminUsers() {
        const tbody = document.getElementById('usersTableBody');
        if (!tbody) return;
        
        tbody.innerHTML = '';
        
        try {
            let users;
            
            if (this.demoMode) {
                users = this.fallbackData.users;
            } else {
                const snapshot = await this.db.collection('users').get();
                users = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            }
            
            users.forEach(user => {
                const row = document.createElement('tr');
                const createdDate = user.createdAt ? 
                    (user.createdAt.toDate ? user.createdAt.toDate() : user.createdAt) : 
                    new Date();
                
                row.innerHTML = `
                    <td>${this.escapeHtml(user.email)}</td>
                    <td>${this.escapeHtml(user.displayName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</td>
                    <td><span class="status status--${user.role === 'admin' ? 'error' : 'info'}">${this.getRoleName(user.role)}</span></td>
                    <td>${createdDate.toLocaleDateString('ru-RU')}</td>
                    <td>
                        <button class="btn btn--sm btn--outline" onclick="app.showRoleModal('${user.id}', '${this.escapeHtml(user.email)}', '${user.role}')">
                            –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å
                        </button>
                        ${user.role !== 'admin' ? `<button class="btn btn--sm btn--outline" style="color: var(--color-error);" onclick="app.deleteUser('${user.id}')">–£–¥–∞–ª–∏—Ç—å</button>` : ''}
                    </td>
                `;
                tbody.appendChild(row);
            });
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            tbody.innerHTML = '<tr><td colspan="5">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</td></tr>';
        }
    }
    
    async loadAdminPresentations() {
        const tbody = document.getElementById('presentationsTableBody');
        if (!tbody) return;
        
        tbody.innerHTML = '';
        
        try {
            let presentations;
            
            if (this.demoMode) {
                presentations = this.fallbackData.presentations;
            } else {
                const snapshot = await this.db.collection('presentations').orderBy('createdAt', 'desc').get();
                presentations = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            }
            
            presentations.forEach(presentation => {
                const row = document.createElement('tr');
                const date = presentation.createdAt ? 
                    (presentation.createdAt.toDate ? presentation.createdAt.toDate() : presentation.createdAt) : 
                    new Date();
                
                row.innerHTML = `
                    <td>${this.escapeHtml(presentation.title)}</td>
                    <td>${this.escapeHtml(presentation.ownerName || presentation.author || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</td>
                    <td><span class="status status--info">${this.getCategoryName(presentation.category)}</span></td>
                    <td><span class="status status--${presentation.isPublic ? 'success' : 'warning'}">${presentation.isPublic ? '–ü—É–±–ª–∏—á–Ω–∞—è' : '–ü—Ä–∏–≤–∞—Ç–Ω–∞—è'}</span></td>
                    <td>${date.toLocaleDateString('ru-RU')}</td>
                    <td>
                        <button class="btn btn--sm btn--outline" onclick="app.viewPresentation('${presentation.id}')">–ü—Ä–æ—Å–º–æ—Ç—Ä</button>
                        <button class="btn btn--sm btn--outline" style="color: var(--color-error);" onclick="app.deletePresentation('${presentation.id}')">–£–¥–∞–ª–∏—Ç—å</button>
                    </td>
                `;
                tbody.appendChild(row);
            });
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π:', error);
            tbody.innerHTML = '<tr><td colspan="6">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</td></tr>';
        }
    }
    
    viewPresentation(presentationId) {
        let presentation = null;
        
        if (this.demoMode) {
            presentation = this.fallbackData.presentations.find(p => p.id === presentationId);
        }
        
        if (presentation) {
            this.openPresentation(presentation);
        }
    }
    
    async loadAdminStats() {
        try {
            let totalUsers, totalPresentations, totalViews;
            
            if (this.demoMode) {
                totalUsers = this.fallbackData.users.length;
                totalPresentations = this.fallbackData.presentations.length;
                totalViews = this.fallbackData.presentations.reduce((sum, p) => sum + (p.viewCount || 0), 0);
            } else {
                const usersSnapshot = await this.db.collection('users').get();
                const presentationsSnapshot = await this.db.collection('presentations').get();
                
                totalUsers = usersSnapshot.size;
                totalPresentations = presentationsSnapshot.size;
                totalViews = 0;
                
                presentationsSnapshot.docs.forEach(doc => {
                    totalViews += doc.data().views || 0;
                });
            }
            
            const totalUsersEl = document.getElementById('totalUsers');
            const totalPresentationsEl = document.getElementById('totalPresentations');
            const totalViewsEl = document.getElementById('totalViews');
            
            if (totalUsersEl) totalUsersEl.textContent = totalUsers;
            if (totalPresentationsEl) totalPresentationsEl.textContent = totalPresentations;
            if (totalViewsEl) totalViewsEl.textContent = totalViews;
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        }
    }
    
    getRoleName(role) {
        const roles = {
            guest: '–ì–æ—Å—Ç—å',
            user: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            admin: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
        };
        return roles[role] || role;
    }
    
    showRoleModal(userId, email, currentRole) {
        if (this.demoMode) {
            this.showToast('warning', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ');
            return;
        }
        
        const userEmailEl = document.getElementById('roleUserEmail');
        const newRoleEl = document.getElementById('newRole');
        const modalEl = document.getElementById('roleModal');
        const formEl = document.getElementById('roleForm');
        
        if (userEmailEl) userEmailEl.textContent = email;
        if (newRoleEl) newRoleEl.value = currentRole;
        if (modalEl) modalEl.classList.remove('hidden');
        if (formEl) formEl.dataset.userId = userId;
    }
    
    hideModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) modal.classList.add('hidden');
    }
    
    async handleRoleChange(e) {
        e.preventDefault();
        
        if (this.demoMode) {
            this.showToast('warning', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ');
            this.hideModal('roleModal');
            return;
        }
        
        const userId = e.target.dataset.userId;
        const newRole = document.getElementById('newRole').value;
        
        try {
            await this.db.collection('users').doc(userId).update({ role: newRole });
            this.showToast('success', '–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞', '–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
            this.hideModal('roleModal');
            await this.loadAdminUsers();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏:', error);
            this.showToast('error', '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
    }
    
    async deleteUser(userId) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')) {
            return;
        }
        
        if (this.demoMode) {
            this.showToast('warning', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ', '–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ');
            return;
        }
        
        try {
            await this.db.collection('users').doc(userId).delete();
            this.showToast('success', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
            await this.loadAdminUsers();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            this.showToast('error', '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
    }
    
    async deletePresentation(presentationId) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é?')) {
            return;
        }
        
        if (this.demoMode) {
            this.showToast('warning', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ', '–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ');
            return;
        }
        
        try {
            await this.db.collection('presentations').doc(presentationId).delete();
            this.showToast('success', '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞', '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
            await this.loadAdminPresentations();
            this.loadPresentations();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏:', error);
            this.showToast('error', '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é');
        }
    }
    
    showToast(type, title, message) {
        const container = document.getElementById('toastContainer');
        if (!container) return;
        
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        
        toast.innerHTML = `
            <div class="toast-content">
                <div class="toast-title">${this.escapeHtml(title)}</div>
                <div class="toast-message">${this.escapeHtml(message)}</div>
            </div>
            <button class="toast-close">&times;</button>
        `;
        
        container.appendChild(toast);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (toast.parentNode) {
                toast.remove();
            }
        }, 5000);
        
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeBtn = toast.querySelector('.toast-close');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => {
                toast.remove();
            });
        }
    }
    
    getAuthErrorMessage(error) {
        const errorMessages = {
            'auth/user-not-found': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
            'auth/wrong-password': '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å',
            'auth/email-already-in-use': 'Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è',
            'auth/weak-password': '–°–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å',
            'auth/invalid-email': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email',
            'auth/popup-closed-by-user': '–û–∫–Ω–æ –≤—Ö–æ–¥–∞ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ'
        };
        
        return errorMessages[error.code] || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ';
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let app = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üöÄ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = new PresentationHosting();
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ window –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    window.app = app;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    await app.init();
    
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ');
});

/*
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï Firestore Security Rules –¥–ª—è —Ä–∞–±–æ—Ç—ã –ë–ï–ó Authentication:

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö)
    function isAdmin(uid) {
      return exists(/databases/$(database)/documents/users/$(uid)) &&
             get(/databases/$(database)/documents/users/$(uid)).data.role == "admin";
    }
    
    // –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: —á–∏—Ç–∞—Ç—å –º–æ–≥—É—Ç –≤—Å–µ –ø—É–±–ª–∏—á–Ω—ã–µ, –ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ
    match /presentations/{id} {
      allow read: if resource.data.isPublic == true ||
                     (request.auth != null && 
                      (request.auth.uid == resource.data.ownerId ||
                       isAdmin(request.auth.uid)));
      allow write: if request.auth != null &&
                      (request.auth.uid == resource.data.ownerId ||
                       isAdmin(request.auth.uid));
      allow create: if request.auth != null;
    }
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
    match /users/{uid} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                      (request.auth.uid == uid || isAdmin(request.auth.uid));
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏: —á–∏—Ç–∞—Ç—å –º–æ–≥—É—Ç –≤—Å–µ, –ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—ã
    match /settings/{doc} {
      allow read: if true;
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }
  }
}
*/